// Code generated by capnpc-go. DO NOT EDIT.

package fragment

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Fragment struct{ capnp.Struct }
type Fragment_specific Fragment
type Fragment_specific_Which uint16

const (
	Fragment_specific_Which_dataLeaf    Fragment_specific_Which = 0
	Fragment_specific_Which_dataNode    Fragment_specific_Which = 1
	Fragment_specific_Which_wbbtreeNode Fragment_specific_Which = 2
)

func (w Fragment_specific_Which) String() string {
	const s = "dataLeafdataNodewbbtreeNode"
	switch w {
	case Fragment_specific_Which_dataLeaf:
		return s[0:8]
	case Fragment_specific_Which_dataNode:
		return s[8:16]
	case Fragment_specific_Which_wbbtreeNode:
		return s[16:27]

	}
	return "Fragment_specific_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Fragment_TypeID is the unique identifier for the type Fragment.
const Fragment_TypeID = 0xd87e6ef139a4eaa0

func NewFragment(s *capnp.Segment) (Fragment, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Fragment{st}, err
}

func NewRootFragment(s *capnp.Segment) (Fragment, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Fragment{st}, err
}

func ReadRootFragment(msg *capnp.Message) (Fragment, error) {
	root, err := msg.RootPtr()
	return Fragment{root.Struct()}, err
}

func (s Fragment) String() string {
	str, _ := text.Marshal(0xd87e6ef139a4eaa0, s.Struct)
	return str
}

func (s Fragment) Children() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.DataList{List: p.List()}, err
}

func (s Fragment) HasChildren() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Fragment) SetChildren(v capnp.DataList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewChildren sets the children field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Fragment) NewChildren(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Fragment) Specific() Fragment_specific { return Fragment_specific(s) }

func (s Fragment_specific) Which() Fragment_specific_Which {
	return Fragment_specific_Which(s.Struct.Uint16(0))
}
func (s Fragment_specific) DataLeaf() ([]byte, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != dataLeaf")
	}
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Fragment_specific) HasDataLeaf() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Fragment_specific) SetDataLeaf(v []byte) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetData(1, v)
}

func (s Fragment_specific) DataNode() uint64 {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != dataNode")
	}
	return s.Struct.Uint64(8)
}

func (s Fragment_specific) SetDataNode(v uint64) {
	s.Struct.SetUint16(0, 1)
	s.Struct.SetUint64(8, v)
}

func (s Fragment_specific) WbbtreeNode() (WBBTreeNode, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != wbbtreeNode")
	}
	p, err := s.Struct.Ptr(1)
	return WBBTreeNode{Struct: p.Struct()}, err
}

func (s Fragment_specific) HasWbbtreeNode() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Fragment_specific) SetWbbtreeNode(v WBBTreeNode) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewWbbtreeNode sets the wbbtreeNode field to a newly
// allocated WBBTreeNode struct, preferring placement in s's segment.
func (s Fragment_specific) NewWbbtreeNode() (WBBTreeNode, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewWBBTreeNode(s.Struct.Segment())
	if err != nil {
		return WBBTreeNode{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// Fragment_List is a list of Fragment.
type Fragment_List struct{ capnp.List }

// NewFragment creates a new list of Fragment.
func NewFragment_List(s *capnp.Segment, sz int32) (Fragment_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return Fragment_List{l}, err
}

func (s Fragment_List) At(i int) Fragment { return Fragment{s.List.Struct(i)} }

func (s Fragment_List) Set(i int, v Fragment) error { return s.List.SetStruct(i, v.Struct) }

func (s Fragment_List) String() string {
	str, _ := text.MarshalList(0xd87e6ef139a4eaa0, s.List)
	return str
}

// Fragment_Promise is a wrapper for a Fragment promised by a client call.
type Fragment_Promise struct{ *capnp.Pipeline }

func (p Fragment_Promise) Struct() (Fragment, error) {
	s, err := p.Pipeline.Struct()
	return Fragment{s}, err
}

func (p Fragment_Promise) Specific() Fragment_specific_Promise {
	return Fragment_specific_Promise{p.Pipeline}
}

// Fragment_specific_Promise is a wrapper for a Fragment_specific promised by a client call.
type Fragment_specific_Promise struct{ *capnp.Pipeline }

func (p Fragment_specific_Promise) Struct() (Fragment_specific, error) {
	s, err := p.Pipeline.Struct()
	return Fragment_specific{s}, err
}

func (p Fragment_specific_Promise) WbbtreeNode() WBBTreeNode_Promise {
	return WBBTreeNode_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type WBBTreeNode struct{ capnp.Struct }

// WBBTreeNode_TypeID is the unique identifier for the type WBBTreeNode.
const WBBTreeNode_TypeID = 0xa0cc97fbf4bdf8b1

func NewWBBTreeNode(s *capnp.Segment) (WBBTreeNode, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return WBBTreeNode{st}, err
}

func NewRootWBBTreeNode(s *capnp.Segment) (WBBTreeNode, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return WBBTreeNode{st}, err
}

func ReadRootWBBTreeNode(msg *capnp.Message) (WBBTreeNode, error) {
	root, err := msg.RootPtr()
	return WBBTreeNode{root.Struct()}, err
}

func (s WBBTreeNode) String() string {
	str, _ := text.Marshal(0xa0cc97fbf4bdf8b1, s.Struct)
	return str
}

func (s WBBTreeNode) Key() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s WBBTreeNode) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s WBBTreeNode) SetKey(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s WBBTreeNode) CountLeft() uint64 {
	return s.Struct.Uint64(0)
}

func (s WBBTreeNode) SetCountLeft(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s WBBTreeNode) CountRight() uint64 {
	return s.Struct.Uint64(8)
}

func (s WBBTreeNode) SetCountRight(v uint64) {
	s.Struct.SetUint64(8, v)
}

// WBBTreeNode_List is a list of WBBTreeNode.
type WBBTreeNode_List struct{ capnp.List }

// NewWBBTreeNode creates a new list of WBBTreeNode.
func NewWBBTreeNode_List(s *capnp.Segment, sz int32) (WBBTreeNode_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return WBBTreeNode_List{l}, err
}

func (s WBBTreeNode_List) At(i int) WBBTreeNode { return WBBTreeNode{s.List.Struct(i)} }

func (s WBBTreeNode_List) Set(i int, v WBBTreeNode) error { return s.List.SetStruct(i, v.Struct) }

func (s WBBTreeNode_List) String() string {
	str, _ := text.MarshalList(0xa0cc97fbf4bdf8b1, s.List)
	return str
}

// WBBTreeNode_Promise is a wrapper for a WBBTreeNode promised by a client call.
type WBBTreeNode_Promise struct{ *capnp.Pipeline }

func (p WBBTreeNode_Promise) Struct() (WBBTreeNode, error) {
	s, err := p.Pipeline.Struct()
	return WBBTreeNode{s}, err
}

const schema_c50de5992c3b327a = "x\xda\\\x92\xb1k\x14A\x14\xc6\xbf\xefM\xce3\x92" +
	"\x8b\xb7\x9c\x85E\xae\x11\x04\x05\x0d\xa8\x95\xda\xc4\x10E" +
	"\xc3\x19\xee\x85\x0b\x8aX\xb8\xb7;\x97\x1c\xea\xeeyn" +
	"8ba\xed? b\x97\xc2^,,m\x04\x0b\xc1" +
	"FA\x10\x0b;\x1b;\xd1B\x10\x1d\x99u\xb3\x0b\xd7" +
	"\xbd\xf9\xf11\xfc\xde7\xd3\xfc\xb2$\xa7j\xa9\x00\xba" +
	"P\xdb\xe7&\x8dG?>\xbc\x9c{\x0c=Lq\xbb" +
	"\xdf\x9e\x9d\xfd\x9e<\xfc\x84\x0d\xa9\xd3\x00g\xda<@" +
	"\xb0u\x94\xcfA\xf7\xe2\xd7\xab\x9f\xbf\x9f\xbc\xdb\x85\x1e" +
	"\xa4\xb8\x07\xa7\xcf\x9fx\xfa\xb5\xf1\x065\xd6\x81\xd6[" +
	"~n}\xcc\xa7\xf7y\xb8\xbcj*,>rO^" +
	"\xb7v\xf2i[&8\xe9\x06\xe3p\xf3\xaeM2\xb3" +
	"\x18\x85\xa3dt\xeeRq^\xbc?\xb2\xd1p0\x8c" +
	"\x00\x9d33\x0b\xce\xf1\x10\x09\x04\x17W\x01]1\xd4" +
	"\xae\xb0\xcd\xbf\x1e\x0b\x10\\\xf5\xb8c\xa8\xd7\x85m\xf9" +
	"\xe3\xb1\x01\x82\x8d>\xa0=C\xbd%tq\x98\x85\x1d" +
	"\x1b\x0e\x00\xb0\x01a\x03\xff\xd9Z\x1a[\xcff!\x9c" +
	"\x05\xdd\xa4\xdf\xcf\xc6\xd6\xae\xa1\x9e\xc6\x96\xcdj{\x90" +
	"M\xb0t\x96\xc2\xf9\xda\xf2r\xcf\xe7S\x13\xdb.\xe9" +
	"}\x81\x99\\\xf6\x08\xa0K\x86\xda\x11\xb2X\xe0\xca:" +
	"\xa0\x97\x0d\xb5'\x0c\xa4\xd0\xd7\x1b\x80v\x0d\xf5\xa6\xb0" +
	"~\xdb\xee\x94~Q\xba\x9dd\x1d;\x00\xb3\xd2/g" +
	"\xeb\xc3M\x98\xad\x0aNK\xed\x15\x09o\xb4\xbf4:" +
	"\xee{:f\xa8+\xde\x88\xac\xbeApa\x15\xe2\xa2" +
	"\xad\xe1\x9dxl\x13\xdf\xc7<\xd85\xccU\xe6AW" +
	"\xbd\x08\xfe\x05\x00\x00\xff\xff9+\x95\xdc"

func init() {
	schemas.Register(schema_c50de5992c3b327a,
		0x950cb5d2f3880d77,
		0xa0cc97fbf4bdf8b1,
		0xd87e6ef139a4eaa0)
}
