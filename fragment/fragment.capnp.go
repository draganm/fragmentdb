// Code generated by capnpc-go. DO NOT EDIT.

package fragment

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Fragment struct{ capnp.Struct }
type Fragment_specific Fragment
type Fragment_specific_Which uint16

const (
	Fragment_specific_Which_dataLeaf Fragment_specific_Which = 0
	Fragment_specific_Which_dataNode Fragment_specific_Which = 1
	Fragment_specific_Which_trieNode Fragment_specific_Which = 2
)

func (w Fragment_specific_Which) String() string {
	const s = "dataLeafdataNodetrieNode"
	switch w {
	case Fragment_specific_Which_dataLeaf:
		return s[0:8]
	case Fragment_specific_Which_dataNode:
		return s[8:16]
	case Fragment_specific_Which_trieNode:
		return s[16:24]

	}
	return "Fragment_specific_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Fragment_TypeID is the unique identifier for the type Fragment.
const Fragment_TypeID = 0xd87e6ef139a4eaa0

func NewFragment(s *capnp.Segment) (Fragment, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Fragment{st}, err
}

func NewRootFragment(s *capnp.Segment) (Fragment, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Fragment{st}, err
}

func ReadRootFragment(msg *capnp.Message) (Fragment, error) {
	root, err := msg.RootPtr()
	return Fragment{root.Struct()}, err
}

func (s Fragment) String() string {
	str, _ := text.Marshal(0xd87e6ef139a4eaa0, s.Struct)
	return str
}

func (s Fragment) Children() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.DataList{List: p.List()}, err
}

func (s Fragment) HasChildren() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Fragment) SetChildren(v capnp.DataList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewChildren sets the children field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Fragment) NewChildren(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Fragment) Specific() Fragment_specific { return Fragment_specific(s) }

func (s Fragment_specific) Which() Fragment_specific_Which {
	return Fragment_specific_Which(s.Struct.Uint16(0))
}
func (s Fragment_specific) DataLeaf() ([]byte, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != dataLeaf")
	}
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Fragment_specific) HasDataLeaf() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Fragment_specific) SetDataLeaf(v []byte) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetData(1, v)
}

func (s Fragment_specific) DataNode() uint64 {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != dataNode")
	}
	return s.Struct.Uint64(8)
}

func (s Fragment_specific) SetDataNode(v uint64) {
	s.Struct.SetUint16(0, 1)
	s.Struct.SetUint64(8, v)
}

func (s Fragment_specific) TrieNode() ([]byte, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != trieNode")
	}
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Fragment_specific) HasTrieNode() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Fragment_specific) SetTrieNode(v []byte) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetData(1, v)
}

// Fragment_List is a list of Fragment.
type Fragment_List struct{ capnp.List }

// NewFragment creates a new list of Fragment.
func NewFragment_List(s *capnp.Segment, sz int32) (Fragment_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return Fragment_List{l}, err
}

func (s Fragment_List) At(i int) Fragment { return Fragment{s.List.Struct(i)} }

func (s Fragment_List) Set(i int, v Fragment) error { return s.List.SetStruct(i, v.Struct) }

func (s Fragment_List) String() string {
	str, _ := text.MarshalList(0xd87e6ef139a4eaa0, s.List)
	return str
}

// Fragment_Promise is a wrapper for a Fragment promised by a client call.
type Fragment_Promise struct{ *capnp.Pipeline }

func (p Fragment_Promise) Struct() (Fragment, error) {
	s, err := p.Pipeline.Struct()
	return Fragment{s}, err
}

func (p Fragment_Promise) Specific() Fragment_specific_Promise {
	return Fragment_specific_Promise{p.Pipeline}
}

// Fragment_specific_Promise is a wrapper for a Fragment_specific promised by a client call.
type Fragment_specific_Promise struct{ *capnp.Pipeline }

func (p Fragment_specific_Promise) Struct() (Fragment_specific, error) {
	s, err := p.Pipeline.Struct()
	return Fragment_specific{s}, err
}

const schema_c50de5992c3b327a = "x\xda\\\x90\xb1J3Q\x10\x85\xcf\x99\x9b\xfc\xf9#" +
	"\xd9\xe8\x12\xc1\x14\xa6W\xd0@\xec\xd4F!Z\x84(" +
	"\xb9`\xc0\xd2es\xa3\x0b\xba\x86\x18\x08XX\xfb\x02" +
	"\x16\x16\x8a\x82\xd6V\xbe\x80\xe0\x0bX\xf9\x026v\xc1" +
	"\xcaB\xaf\\uYp\xaa\x99o\x869gf\xe2r" +
	"Ej\xd9)\x01t9\xfb\xcf\x0e\xbd\xd3\xb7\xa7\xfb\xc2" +
	"\x19t\x99b\xaf^o\x16G\xf1\xc93\xda\x92\xa3\x02" +
	"j\xa31\x82\xfe\xfb\x1d\x98\xf6\xf48\xc5\x1e/,\xcf" +
	"\x9d\xbfx\x8f\xc8J\x0e(]\xf0\xa1tK\x97]s" +
	"\x88y\xdb\xed\x07\xbb\x07&\x1e\xa8j\x18\xf4\xe2\xde\xd2" +
	"\xfao]=\xea\x990\xeaF!\xa0\x0b*3m-" +
	"'I\xc0_k\x00\xba\xae\xa8[\xc2\x0a?\x1d\x16\xc0" +
	"\xdfp\xb8\xa9\xa8\xb7\x85\x15\xf9pX\x01~\xdb\xe1-" +
	"E\xbd#\xb4\x9d`\x104M\xd0\x05@\x0fB\x0f?" +
	"l\xf3\xb0c\x1c\xcbC\x98\x07\xed\xa0\x1f\x99\x84%s" +
	"\x89O\xf9\xe3\x13-R\xffW\x19 \xe3\xdc\xcd:\xbd" +
	"\x19E]\x17\xbaH\xdf\xe6\xaf6 6\xdc\x8b\xf6;" +
	"}\x13\xbb\xd5E\xb0\xa5\xf8\xadP\x04mz0\xbe\x02" +
	"\x00\x00\xff\xff%$ab"

func init() {
	schemas.Register(schema_c50de5992c3b327a,
		0x950cb5d2f3880d77,
		0xd87e6ef139a4eaa0)
}
