// Code generated by capnpc-go. DO NOT EDIT.

package fragment

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Fragment struct{ capnp.Struct }
type Fragment_specific Fragment
type Fragment_specific_Which uint16

const (
	Fragment_specific_Which_dataLeaf    Fragment_specific_Which = 0
	Fragment_specific_Which_dataNode    Fragment_specific_Which = 1
	Fragment_specific_Which_trieNode    Fragment_specific_Which = 2
	Fragment_specific_Which_wbbtreeNode Fragment_specific_Which = 3
)

func (w Fragment_specific_Which) String() string {
	const s = "dataLeafdataNodetrieNodewbbtreeNode"
	switch w {
	case Fragment_specific_Which_dataLeaf:
		return s[0:8]
	case Fragment_specific_Which_dataNode:
		return s[8:16]
	case Fragment_specific_Which_trieNode:
		return s[16:24]
	case Fragment_specific_Which_wbbtreeNode:
		return s[24:35]

	}
	return "Fragment_specific_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Fragment_TypeID is the unique identifier for the type Fragment.
const Fragment_TypeID = 0xd87e6ef139a4eaa0

func NewFragment(s *capnp.Segment) (Fragment, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Fragment{st}, err
}

func NewRootFragment(s *capnp.Segment) (Fragment, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Fragment{st}, err
}

func ReadRootFragment(msg *capnp.Message) (Fragment, error) {
	root, err := msg.RootPtr()
	return Fragment{root.Struct()}, err
}

func (s Fragment) String() string {
	str, _ := text.Marshal(0xd87e6ef139a4eaa0, s.Struct)
	return str
}

func (s Fragment) Children() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.DataList{List: p.List()}, err
}

func (s Fragment) HasChildren() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Fragment) SetChildren(v capnp.DataList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewChildren sets the children field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Fragment) NewChildren(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Fragment) Specific() Fragment_specific { return Fragment_specific(s) }

func (s Fragment_specific) Which() Fragment_specific_Which {
	return Fragment_specific_Which(s.Struct.Uint16(0))
}
func (s Fragment_specific) DataLeaf() ([]byte, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != dataLeaf")
	}
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Fragment_specific) HasDataLeaf() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Fragment_specific) SetDataLeaf(v []byte) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetData(1, v)
}

func (s Fragment_specific) DataNode() uint64 {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != dataNode")
	}
	return s.Struct.Uint64(8)
}

func (s Fragment_specific) SetDataNode(v uint64) {
	s.Struct.SetUint16(0, 1)
	s.Struct.SetUint64(8, v)
}

func (s Fragment_specific) TrieNode() ([]byte, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != trieNode")
	}
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Fragment_specific) HasTrieNode() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Fragment_specific) SetTrieNode(v []byte) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetData(1, v)
}

func (s Fragment_specific) WbbtreeNode() (WBBTreeNode, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != wbbtreeNode")
	}
	p, err := s.Struct.Ptr(1)
	return WBBTreeNode{Struct: p.Struct()}, err
}

func (s Fragment_specific) HasWbbtreeNode() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Fragment_specific) SetWbbtreeNode(v WBBTreeNode) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewWbbtreeNode sets the wbbtreeNode field to a newly
// allocated WBBTreeNode struct, preferring placement in s's segment.
func (s Fragment_specific) NewWbbtreeNode() (WBBTreeNode, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewWBBTreeNode(s.Struct.Segment())
	if err != nil {
		return WBBTreeNode{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// Fragment_List is a list of Fragment.
type Fragment_List struct{ capnp.List }

// NewFragment creates a new list of Fragment.
func NewFragment_List(s *capnp.Segment, sz int32) (Fragment_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return Fragment_List{l}, err
}

func (s Fragment_List) At(i int) Fragment { return Fragment{s.List.Struct(i)} }

func (s Fragment_List) Set(i int, v Fragment) error { return s.List.SetStruct(i, v.Struct) }

func (s Fragment_List) String() string {
	str, _ := text.MarshalList(0xd87e6ef139a4eaa0, s.List)
	return str
}

// Fragment_Promise is a wrapper for a Fragment promised by a client call.
type Fragment_Promise struct{ *capnp.Pipeline }

func (p Fragment_Promise) Struct() (Fragment, error) {
	s, err := p.Pipeline.Struct()
	return Fragment{s}, err
}

func (p Fragment_Promise) Specific() Fragment_specific_Promise {
	return Fragment_specific_Promise{p.Pipeline}
}

// Fragment_specific_Promise is a wrapper for a Fragment_specific promised by a client call.
type Fragment_specific_Promise struct{ *capnp.Pipeline }

func (p Fragment_specific_Promise) Struct() (Fragment_specific, error) {
	s, err := p.Pipeline.Struct()
	return Fragment_specific{s}, err
}

func (p Fragment_specific_Promise) WbbtreeNode() WBBTreeNode_Promise {
	return WBBTreeNode_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type WBBTreeNode struct{ capnp.Struct }

// WBBTreeNode_TypeID is the unique identifier for the type WBBTreeNode.
const WBBTreeNode_TypeID = 0xa0cc97fbf4bdf8b1

func NewWBBTreeNode(s *capnp.Segment) (WBBTreeNode, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return WBBTreeNode{st}, err
}

func NewRootWBBTreeNode(s *capnp.Segment) (WBBTreeNode, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return WBBTreeNode{st}, err
}

func ReadRootWBBTreeNode(msg *capnp.Message) (WBBTreeNode, error) {
	root, err := msg.RootPtr()
	return WBBTreeNode{root.Struct()}, err
}

func (s WBBTreeNode) String() string {
	str, _ := text.Marshal(0xa0cc97fbf4bdf8b1, s.Struct)
	return str
}

func (s WBBTreeNode) Key() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s WBBTreeNode) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s WBBTreeNode) SetKey(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s WBBTreeNode) CountLeft() uint64 {
	return s.Struct.Uint64(0)
}

func (s WBBTreeNode) SetCountLeft(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s WBBTreeNode) CountRight() uint64 {
	return s.Struct.Uint64(8)
}

func (s WBBTreeNode) SetCountRight(v uint64) {
	s.Struct.SetUint64(8, v)
}

// WBBTreeNode_List is a list of WBBTreeNode.
type WBBTreeNode_List struct{ capnp.List }

// NewWBBTreeNode creates a new list of WBBTreeNode.
func NewWBBTreeNode_List(s *capnp.Segment, sz int32) (WBBTreeNode_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return WBBTreeNode_List{l}, err
}

func (s WBBTreeNode_List) At(i int) WBBTreeNode { return WBBTreeNode{s.List.Struct(i)} }

func (s WBBTreeNode_List) Set(i int, v WBBTreeNode) error { return s.List.SetStruct(i, v.Struct) }

func (s WBBTreeNode_List) String() string {
	str, _ := text.MarshalList(0xa0cc97fbf4bdf8b1, s.List)
	return str
}

// WBBTreeNode_Promise is a wrapper for a WBBTreeNode promised by a client call.
type WBBTreeNode_Promise struct{ *capnp.Pipeline }

func (p WBBTreeNode_Promise) Struct() (WBBTreeNode, error) {
	s, err := p.Pipeline.Struct()
	return WBBTreeNode{s}, err
}

const schema_c50de5992c3b327a = "x\xda\\\x92\xbfk\x13a\x1c\xc6\x9f\xe7\xfb^\x8d\x91" +
	"\xa6\xe6\x88\x82C\xb3\x08\x82\x82\x16\xd4I]jQ\xd1" +
	"\x12J\xbe\xa5\"\x88\x83\x97\xbb7\xcda\xbd\x8b\xf1$" +
	"V\xc4\xc9\xc1\x7f@\xc4\xad\x83\xbbt\xe8\xe0\xe0\"\xb8" +
	"99\x89\xbb\x08\x0e\x82\xe8 \xf8\xe3\x957&9\xe8" +
	"\xf6\xbd\x0f\x0f\xc7\xe7y\xee\xea_\x17\xe5\xe4L.\x80" +
	"\xce\xcf\xecq\xc3\xda\x93\xef\xefwf\x9fB\x0fQ\xdc" +
	"\xd6\x97\x17g\xbee\x8f>\xe0\xaaT\x18\x00\xa7\x9b\xdc" +
	"G\xb0q\x84\x9fA\xb7\xfd\xf3\xf5\x8f_\xcf\xdemA" +
	"\xf7S\xdc\x83S\xe7\x8e?\xffT{\x8b\x19V\x80F" +
	"U>6\x0e\x8a\xbfBy\x09\x96\xaf\xda\x15\x1eE\xb6" +
	"\xe5M\xe3\xd5\xe8\xda\x91!N\xb8\xee Z\xbfm\xb3" +
	"\xc2,\xc4Q?\xeb\x9f\xbd4~^\xb8\xdb\xb7q\xda" +
	"Mc@\xeb&\x98w\x8e\x07H \x8c\x96\x01\xbdi" +
	"\xa8\x1b\xc2&\xffz,@\x98z\xdc3\xd4B\xd8\x94" +
	"?\x1e\x1b \xbc\xe3q\xdfP\x1f\x0a\x9b\xe6\xb7\xc7\x01" +
	"\x10nv\x00\xbdo\xa8\x8f\x85.\x89\x8a\xa8e\xa3." +
	"\x00\xd6 \xac\xe1?[\xc9\x13\xebY\x15\xc2*\xe8\x8a" +
	"Aj'l\x92\x1bv:\xc5\xc0\xda\x15T\xf2\xc4\xb2" +
	"^\x0e\x05\xb2\x0eN\xeb\xc9\xb8\xde\xb5\xa5\xa55\x9f\xcf" +
	"Mb\xdb\xa4\xce\x9a\x00\x08|\xaf\x8b\x87\x01]4\xd4" +
	"\x96\x90\xe3\xaeWV\x01\xbdl\xa8k\xc2P\xc6M\xf5" +
	":\xa0mC\xbd!\xac\xdc\xb2\x9bS\x978\xbf\x97\x15" +
	"-\xdb\x05\x8b\xa9\xf3\x88\xad\xa6\xeb0\xbd\x12\xee\x96\x9a" +
	"l\x0eo\xb4wjt\xccow\xd4P/x#\xb2" +
	"\xfcc\xc2\xf3\xcb\x10\x17\xf7\xd2\x8dd`3\xbf\xc7\x1c" +
	"\xd86\x1c\xa9\xcc\x81\xae\xfcx\xf8\x17\x00\x00\xff\xff\xe6" +
	"\xe3\x9e\xae"

func init() {
	schemas.Register(schema_c50de5992c3b327a,
		0x950cb5d2f3880d77,
		0xa0cc97fbf4bdf8b1,
		0xd87e6ef139a4eaa0)
}
