// Code generated by capnpc-go. DO NOT EDIT.

package fragment

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Fragment struct{ capnp.Struct }
type Fragment_specific Fragment
type Fragment_specific_Which uint16

const (
	Fragment_specific_Which_dataLeaf   Fragment_specific_Which = 0
	Fragment_specific_Which_dataNode   Fragment_specific_Which = 1
	Fragment_specific_Which_trieNode   Fragment_specific_Which = 2
	Fragment_specific_Which_wbtreeNode Fragment_specific_Which = 3
)

func (w Fragment_specific_Which) String() string {
	const s = "dataLeafdataNodetrieNodewbtreeNode"
	switch w {
	case Fragment_specific_Which_dataLeaf:
		return s[0:8]
	case Fragment_specific_Which_dataNode:
		return s[8:16]
	case Fragment_specific_Which_trieNode:
		return s[16:24]
	case Fragment_specific_Which_wbtreeNode:
		return s[24:34]

	}
	return "Fragment_specific_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Fragment_TypeID is the unique identifier for the type Fragment.
const Fragment_TypeID = 0xd87e6ef139a4eaa0

func NewFragment(s *capnp.Segment) (Fragment, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Fragment{st}, err
}

func NewRootFragment(s *capnp.Segment) (Fragment, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Fragment{st}, err
}

func ReadRootFragment(msg *capnp.Message) (Fragment, error) {
	root, err := msg.RootPtr()
	return Fragment{root.Struct()}, err
}

func (s Fragment) String() string {
	str, _ := text.Marshal(0xd87e6ef139a4eaa0, s.Struct)
	return str
}

func (s Fragment) Children() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.DataList{List: p.List()}, err
}

func (s Fragment) HasChildren() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Fragment) SetChildren(v capnp.DataList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewChildren sets the children field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Fragment) NewChildren(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Fragment) Specific() Fragment_specific { return Fragment_specific(s) }

func (s Fragment_specific) Which() Fragment_specific_Which {
	return Fragment_specific_Which(s.Struct.Uint16(0))
}
func (s Fragment_specific) DataLeaf() ([]byte, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != dataLeaf")
	}
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Fragment_specific) HasDataLeaf() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Fragment_specific) SetDataLeaf(v []byte) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetData(1, v)
}

func (s Fragment_specific) DataNode() uint64 {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != dataNode")
	}
	return s.Struct.Uint64(8)
}

func (s Fragment_specific) SetDataNode(v uint64) {
	s.Struct.SetUint16(0, 1)
	s.Struct.SetUint64(8, v)
}

func (s Fragment_specific) TrieNode() ([]byte, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != trieNode")
	}
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Fragment_specific) HasTrieNode() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Fragment_specific) SetTrieNode(v []byte) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetData(1, v)
}

func (s Fragment_specific) WbtreeNode() (WBTreeNode, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != wbtreeNode")
	}
	p, err := s.Struct.Ptr(1)
	return WBTreeNode{Struct: p.Struct()}, err
}

func (s Fragment_specific) HasWbtreeNode() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Fragment_specific) SetWbtreeNode(v WBTreeNode) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewWbtreeNode sets the wbtreeNode field to a newly
// allocated WBTreeNode struct, preferring placement in s's segment.
func (s Fragment_specific) NewWbtreeNode() (WBTreeNode, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewWBTreeNode(s.Struct.Segment())
	if err != nil {
		return WBTreeNode{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// Fragment_List is a list of Fragment.
type Fragment_List struct{ capnp.List }

// NewFragment creates a new list of Fragment.
func NewFragment_List(s *capnp.Segment, sz int32) (Fragment_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return Fragment_List{l}, err
}

func (s Fragment_List) At(i int) Fragment { return Fragment{s.List.Struct(i)} }

func (s Fragment_List) Set(i int, v Fragment) error { return s.List.SetStruct(i, v.Struct) }

func (s Fragment_List) String() string {
	str, _ := text.MarshalList(0xd87e6ef139a4eaa0, s.List)
	return str
}

// Fragment_Promise is a wrapper for a Fragment promised by a client call.
type Fragment_Promise struct{ *capnp.Pipeline }

func (p Fragment_Promise) Struct() (Fragment, error) {
	s, err := p.Pipeline.Struct()
	return Fragment{s}, err
}

func (p Fragment_Promise) Specific() Fragment_specific_Promise {
	return Fragment_specific_Promise{p.Pipeline}
}

// Fragment_specific_Promise is a wrapper for a Fragment_specific promised by a client call.
type Fragment_specific_Promise struct{ *capnp.Pipeline }

func (p Fragment_specific_Promise) Struct() (Fragment_specific, error) {
	s, err := p.Pipeline.Struct()
	return Fragment_specific{s}, err
}

func (p Fragment_specific_Promise) WbtreeNode() WBTreeNode_Promise {
	return WBTreeNode_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type WBTreeNode struct{ capnp.Struct }

// WBTreeNode_TypeID is the unique identifier for the type WBTreeNode.
const WBTreeNode_TypeID = 0xd5e6cfcfcdeafc8e

func NewWBTreeNode(s *capnp.Segment) (WBTreeNode, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return WBTreeNode{st}, err
}

func NewRootWBTreeNode(s *capnp.Segment) (WBTreeNode, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return WBTreeNode{st}, err
}

func ReadRootWBTreeNode(msg *capnp.Message) (WBTreeNode, error) {
	root, err := msg.RootPtr()
	return WBTreeNode{root.Struct()}, err
}

func (s WBTreeNode) String() string {
	str, _ := text.Marshal(0xd5e6cfcfcdeafc8e, s.Struct)
	return str
}

func (s WBTreeNode) Key() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s WBTreeNode) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s WBTreeNode) SetKey(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s WBTreeNode) CountLeft() uint64 {
	return s.Struct.Uint64(0)
}

func (s WBTreeNode) SetCountLeft(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s WBTreeNode) CountRight() uint64 {
	return s.Struct.Uint64(8)
}

func (s WBTreeNode) SetCountRight(v uint64) {
	s.Struct.SetUint64(8, v)
}

// WBTreeNode_List is a list of WBTreeNode.
type WBTreeNode_List struct{ capnp.List }

// NewWBTreeNode creates a new list of WBTreeNode.
func NewWBTreeNode_List(s *capnp.Segment, sz int32) (WBTreeNode_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return WBTreeNode_List{l}, err
}

func (s WBTreeNode_List) At(i int) WBTreeNode { return WBTreeNode{s.List.Struct(i)} }

func (s WBTreeNode_List) Set(i int, v WBTreeNode) error { return s.List.SetStruct(i, v.Struct) }

func (s WBTreeNode_List) String() string {
	str, _ := text.MarshalList(0xd5e6cfcfcdeafc8e, s.List)
	return str
}

// WBTreeNode_Promise is a wrapper for a WBTreeNode promised by a client call.
type WBTreeNode_Promise struct{ *capnp.Pipeline }

func (p WBTreeNode_Promise) Struct() (WBTreeNode, error) {
	s, err := p.Pipeline.Struct()
	return WBTreeNode{s}, err
}

const schema_c50de5992c3b327a = "x\xda\\\x92\xb1k\x13a\x18\xc6\x9f\xe7\xfd.\xc6H" +
	"SsD\xc1\xa1Y\x04AA\x0b\xea\xa4.UT\xb4" +
	"\x84\x92\xb7T\x04q\xf0\xbc\xfb\xd2\x1c\xd6K\x8c'\xb1" +
	"\"N\x0eNn\x0en\x0e\xee\xe2\xd0\xc1Up\x94B" +
	"A\xf0\x1fP\xa1\x83 \xae\xd5O\xbe3\xc9A\xb6\xf7" +
	"~<\x1c\xbf\xe7\xb9k\xfc\\\x92\xd3\x95\xbe\x00\xbaP" +
	"\xd9\xe7F\xf5\x17\xbfw\xb6\xe6^A\x8fP\xdc\x9b\xdd" +
	"\xb7\xe7~e\xcf\xbe\xe2\x86T\x19\x00g[<@\xb0" +
	"y\x8c?@\xf7ro\xf7\xf3\xf6\xf6\xf7/\xd0\x83\x14" +
	"\xf7\xe4\xcc\x85\x93\xaf\xbf\xd5?\xa1\xc2*\xd0\xac\xc9N" +
	"\xf3\xb0\xf8+\x94w`\xf9\xaa\x99p\x11y/\x1f\x9b" +
	"\x1f\x8akKF8\xe5\xba\xc3h\xfd\xbe\xcdr\xb3\x18" +
	"G\x83lp\xfe\xea\xf8y\xf1\xe1\xc0\xc6i7\x8d\x01" +
	"m\x98`\xc19\x1e\"\x810Z\x06\xf4\x8e\xa1n\x08" +
	"[\xfc\xeb\xb1\x00a\xeaq\xcfPsaK\xfexl" +
	"\x80\xf0\x81\xc7\x03C}*l\x99=\x8f\x03 \xdc\xbc" +
	"\x05\xe8cC}.tI\x94Gm\x1bu\x01\xb0\x0e" +
	"a\x1d\xff\xd9J?\xb1\x9e\xd5 \xac\x81.\x1f\xa6v" +
	"\xc2&\xb9\xd1\xdd|h\xedJ\x1f&\xb1l\x94;\x81" +
	"l\x80\xd3v2nw\xf3\xd2Z\x11Oh;\xa4\xce" +
	"\x99\x00\x08|\xab+G\x01]2\xd4\xb6\x90\xe3\xa6\xd7" +
	"W\x01\xbdf\xa8k\xc2P\xc6=\xd5\x9bw\x0c\xf5\xb6" +
	"\xb0z\xcfnNM\xe2\xfe\xa3,o\xdb.\x98O\x8d" +
	"\x0b\xb6\x9a\xae\xc3\xf4J8\xeb4Y\x1c\xdeh\xff\xd4" +
	"\xe8\x84_\xee\xb8\xa1^\xf6Fd\xf9\xbf\x84\x17\x97!" +
	".\xee\xa5\x1b\xc9\xd0f~\x8dy\xb0cX\xa8\xcc\x83" +
	"\xae\xfct\xf8\x17\x00\x00\xff\xff$\xf7\x9ex"

func init() {
	schemas.Register(schema_c50de5992c3b327a,
		0x950cb5d2f3880d77,
		0xd5e6cfcfcdeafc8e,
		0xd87e6ef139a4eaa0)
}
